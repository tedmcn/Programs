import java.util.*;

public class SinglyLinkedList<T> {
	private SinglyLinkedNode<T> head;
	private SinglyLinkedNode<T> tail;
	private int size = 0;
	
	public SinglyLinkedNode<T> getHead() {
		return head;
	}
	
	public void regularInsert(T data) {
		// Insert at end.
		size++;
        if (head == null) {
            head = new SinglyLinkedNode<T>(data);
            tail = head;
        } else {
            SinglyLinkedNode<T> newNode = new SinglyLinkedNode<T>(data);
            tail.setNext(newNode);
            this.tail = newNode;
        }
	}
	
	public void randomInsert(T data) {
		Random rand = new Random();
		int index = rand.nextInt(this.size());
		for(int i = 0; i < index; i++) {
			
		}
	}
	
	public T remove(T data) {
		SinglyLinkedNode<T> curr = head;
		SinglyLinkedNode<T> p1 = null;
		SinglyLinkedNode<T> p2;
		while (curr != null) {
			if(curr.getNext().getData() == data) {
				p1 = curr.getNext();
				p2 = p1.getNext();
				curr.setNext(p2);
			} else {
				curr = curr.getNext();
			}
		}
		return p1.getData();
	}
	
	public T removeIndex(int index) {
		
		for(int i = 0; i < index; i++) {
			SinglyLinkedNode<T> curr = head;
			curr = curr.getNext();
			curr.getData();
		}
		
	}
 
	public int size() {
	    size = 0;
		SinglyLinkedNode<T> curr = head;
	    while(curr.getNext() != null) {
	        curr = curr.getNext();
	        size++;     
	    }
	    return size;
	}
	
	public String toSting() {
		String s = "";
        SinglyLinkedNode<T> curr = head;
        while(curr != null) {
            s += curr.getNext()+" ";
            curr = curr.getNext();

        }
        return s;
    }
}
